#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# | Copyright m3rlinux 2019                    m3rlinux.it@gmail.com |
# +------------------------------------------------------------------+
#
# This file extend check snmp for Check_MK
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Davide Gibilisco <m3rlinux.it@gmail.com>
# NetApp Cluster
# '.1.3.6.1.4.1.789.1.25.2.1.1' => Nodes Name
# '.1.3.6.1.4.1.789.1.25.2.1.21' => Nodes PS Failed Count
# '.1.3.6.1.4.1.789.1.25.2.1.22' => Nodes PS Failed Message

# GENERAL MAPS:

# hp_blade_present_map =       { 1: 'other',    2: 'absent', 3: 'present' }
# hp_blade_status_map =        { 1: 'Other',    2: 'Ok',     3: 'Degraded', 4: 'Failed' }
# hp_blade_status2nagios_map = { 'Other':       2, 'Ok':     0, 'Degraded': 1, 'Failed': 2, }


def inventory_dg_netapp_ps(info):
    # return [ (line[0], None) for line in info if hp_blade_present_map[int(line[1])] == 'present' ]
    # import pprint ; pprint.pprint(info)
    for node in info:
        for node_name, node_fan_fc, node_fan_fmsg, node_ps_fc, node_ps_fmsg in node:
            yield node_name, node_fan_fc, node_fan_fmsg, node_ps_fc, node_ps_fmsg, None


def check_dg_netapp_ps(item, params, info):
    '''
    for line in info:
        if line[0] == item:
            present_state = hp_blade_present_map[int(line[1])]
            if present_state != 'present':
                return (2, 'FAN was present but is not available anymore'
                           ' (Present state: %s)' % present_state)

            snmp_state = hp_blade_status_map[int(line[2])]
            status     = hp_blade_status2nagios_map[snmp_state]
            return (status, 'FAN condition is %s' % (snmp_state))
    return (3, "item not found in snmp data")
    '''
    return (0, "Ok")


check_info["dg_netapp_ps"] = {
    'check_function': check_dg_netapp_ps,
    'inventory_function': inventory_dg_netapp_ps,
    'service_description': 'NetApp PS Count Failed',
    # 'snmp_info':               ('.1.3.6.1.4.1.789.1.25.2.1', ['21', '22']),
    'snmp_info': ('.1.3.6.1.4.1.789.1.25.2.1', ['1', '19', '20', '21', '22']),
    'snmp_scan_function': \
        lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.789."),
}
