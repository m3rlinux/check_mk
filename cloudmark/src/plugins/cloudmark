#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Cloudmark Plugin
#
# Copyright 2019, Davide Gibilisco <m3rlinux.it@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Example Agent Output:
# <<<cloudmark>>>
# Queue 82
# Delivery 13056
# Concurrency 2680
#
# Put your username and password into cloudmark.cfg in MK_CONFDIR
# format: username:password
#
# WARNING!!! For Cloudmark 4 the value of check Delivery is dalayed by 5 minutes,
# because it's hard to fetch the real time value

import os
import urllib2
import base64
import sys
from datetime import datetime, timedelta
import re
try:
    import simplejson as json
except ImportError:
    try:
        import json
    except ImportError:
        print "You need to install python simplejson or json module"
        sys.exit(1)

MK_CONFDIR = os.getenv("MK_CONFDIR") or "/etc/check_mk"
config_file = 'cloudmark.cfg'

try:
    f = open(os.path.join(MK_CONFDIR, config_file), 'r')
    credentials = f.read()
    f.close()
except IOError:
    print "\nUnable to find configuration file, please create %s in %s\n" % (config_file, MK_CONFDIR)
    print "\tExample (single row): username:password\n"
    sys.exit(1)

cm4 = 0  # Default check Cloudmark 5
r = os.popen('ps -ef | grep /usr/bin/bizimp | grep -v grep').read()
if '/usr/bin/bizimp' in r:
    cm4 = 1

time5ago = datetime.now() - timedelta(minutes=5)

if cm4:
    user = credentials.split(":")[0]
    password = credentials.split(":")[1].rstrip()  # rstrip() remove spaces or newlines
else:
    base64string = base64.standard_b64encode(credentials.rstrip())
    queue_url = 'https://localhost:4443/stats/Queues/Global/Queued?samples=1&increment=86400'

delivery_url = 'https://localhost:4443/stats/Messages/Email/MsgSentRecipients/?samples=1&increment=86400'

print "<<<cloudmark>>>"
modes = ["Queue", "Delivery", "Concurrency"]
for mode in modes:
    if mode == "Queue":
        if cm4:
            value = 0
            stats_url = "http://127.0.0.1:8082/stats?suser=%s&spass=%s" % (user, password)
            m = re.compile(r'/Message/Queues/Wait')
            request = urllib2.urlopen(stats_url)
            for i in filter(m.match, request):
                value = value + int(i.split(";")[2].rstrip())
        else:
            request = urllib2.Request(queue_url)
            request.add_header("Authorization", "Basic %s" % base64string)
            response = urllib2.urlopen(request)
            data = json.load(response)
            value = data['data']['Queues']['Global']['Queued']['values'][0]
    elif mode == "Delivery":
        # Computes the mean delivery per minute of five minute ago respect the current time
        if cm4:
            stats_url = "http://127.0.0.1:8082/stats?suser=%s&spass=%s&date=%s&view=5min" % (user, password, time5ago.strftime("%Y%m%d%H%M"))
            m = re.compile(r'/Message/Queues/Done/delivery;COUNTER')
            request = urllib2.urlopen(stats_url)
            value = int(filter(m.match, request)[0].split(";")[2].rstrip()) / 5
        else:
            request = urllib2.Request(delivery_url)
            request.add_header("Authorization", "Basic %s" % base64string)
            response = urllib2.urlopen(request)
            data = json.load(response)
            value = data['data']['Messages']['Email']['MsgSentRecipients']['values'][0]
    elif mode == "Concurrency":
        if cm4:
            count = os.popen("netstat -natup|grep -v '0.0.0.0'|awk '{print $4}'|awk -F ':' '{print $2}'|grep -w 25|wc -l")
            value = count.read().strip()
        else:
            data = os.popen("netstat -antp | grep ':25' | grep -v LISTEN | wc -l")
            value = data.read()
    print "%s %s" % (mode, value)

